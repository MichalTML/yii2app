<?php

namespace frontend\controllers;

use Yii;
use frontend\models\Invoices;
use frontend\models\search\InvoicesSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\helpers\Json;
use frontend\models\Invemp;
/**
 * InvoicesController implements the CRUD actions for Invoices model.
 */
class InvoicesController extends Controller
{

    public function behaviors() {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post' ],
                ],
            ],
        ];
    }

    /**
     * Lists all Invoices models.
     * @return mixed
     */
    private function scanPdf() {

        //unlink('/media/data/NAS/SKANER/2015-09-02/Zestawienie obrotów i sald - szeroki.jpg');
        $users = ['PK' => 'Patrycja Kubicka', 'MK' => 'Michał Kungonda', 'DF' => 'Danuta Fiałek', 'BK' => 'Beata Koprowska', 'ML' => 'Marek Łanogwski', 'AT' => 'Adam Tański'];
        $dir = '/media/data/NAS/SKANER/';
        $pdfFiles = new \FilesystemIterator( $dir );
        foreach ( $pdfFiles as $file ) {
            if ( $file->isFile() & $file->getExtension() == 'pdf' )
            {
                    $nameParts = explode( '.', $file->getFilename() );
                    $fullName = $file->getFilename();
                    $fileName = $nameParts[ 0 ];
                if(  preg_match( '/^faktura_[a-z]{2}_[0-9\_]*$/i', $fileName )){
                    $userParts = explode( '_', $fullName);
                
                    if(count($userParts > 1)){
                    $userName = $userParts[1];
                    if(  array_key_exists($userName, $users)){
                        $scanUser = $users[$userName];
                    } else {
                        $scanUser = 'not registered';
                    }}

                    $creTime = gmdate( "Y-m-d H:i:s", $file->getCTime() );
                    $creDate = gmdate( "Y-m-d", $file->getCTime() );

                    $oldPath = $file->getPathname();
                    $newPath = $dir . $creDate . '/' . $fullName;
                    $imagePath = 'assets/'. $fileName .'.jpg';
                    $model = new Invoices;
                    $model->name = $fileName;
                    $model->ext = $file->getExtension();
                    $model->creTime = $creTime;
                    $model->path = $newPath;
                    $model->scannedBy = $scanUser;
                    $model->isNewRecord = true;

                    $imagick = new \Imagick();
                    $imagick->setResolution(100, 100);
                    $imagick->readImage($oldPath.'[0]');
                    $imagick->setImageFormat('jpg');
                    $imagick->setImageCompression(\imagick::COMPRESSION_JPEG);
                    $imagick->setCompressionQuality(50);

                    $imagick->writeImage($imagePath);


                    if ( $model->validate() & $model->save() )
                    {



                        if ( !file_exists( $dir . $creDate ) )
                        {
                            mkdir( $dir . $creDate, 0777, true );
                        }

                        if ( rename( $oldPath, $newPath ) )
                        {
                            //unset( $oldPath );
                        }
                    }
                }
            }
        }
    }

    public function actionIndex() {
        if(Yii::$app->user->isGuest){
            return $this->redirect(['site/login', 'flag' => 1]);
        }
        // your default model and dataProvider generated by gii
        $this->scanPdf();
        $searchModel = new InvoicesSearch();
        $id = '0';
        $dataProvider = $searchModel->search( Yii::$app->request->queryParams );

        $this->layout = 'action';
        $dataProvider->pagination->pageSize = 15;
        $dataProvider->sort = ['defaultOrder' => ['creTime' => 'DESC']]; 
        // validate if there is a editable input saved via AJAX
        if ( Yii::$app->request->post( 'hasEditable' ) )
        {

            // instantiate your book model for saving
            $statusId = Yii::$app->request->post( 'editableKey' );
            $model = Invoices::findOne( $statusId );

            // store a default json response as desired by editable
            $out = Json::encode( ['output' => '', 'message' => '' ] );

            // fetch the first entry in posted data (there should 
            // only be one entry anyway in this array for an 
            // editable submission)
            // - $posted is the posted data for Book without any indexes
            // - $post is the converted array for single model validation
            $post = [ ];
            $posted = current( $_POST[ 'Invoices' ] );
            $post[ 'Invoices' ] = $posted;

            // load model like any single model validation
            if ( $model->load( $post ) )
            {
                // can save model or do something before saving model
                $model->save();

                // custom output to return to be displayed as the editable grid cell
                // data. Normally this is empty - whereby whatever value is edited by 
                // in the input by user is updated automatically.
//           
//           $roleList = User::getRoleList();
//           if(isset()) var_dump(User::getStatusList());
                // $output = Yii::$app->request->post('hasEditable');
                // specific use case where you need to validate a specific
                // editable column posted when you have more than one 
                // EditableColumn in the grid view. We evaluate here a 
                // check to see if buy_amount was posted for the Book model
                if ( isset( $posted[ 'supplierId' ] ) )
                {
                    $output = $posted[ 'supplierId' ];
                }
                if ( isset( $posted[ 'connection' ] ) )
                {
                    $output = $posted[ 'connection' ];
                }
                if ( isset( $posted[ 'signedBy' ] ) )
                {
                    $model = new Invemp;
                    $result = $model->find()->where(['id' => $posted['signedBy']])->one();
                    $output = $result->name;
                }

                // similarly you can check if the name attribute was posted as well
                // if (isset($posted['name'])) {
                //   $output =  ''; // process as you need
                // } 
                $out = Json::encode( ['output' => $output, 'message' => '' ] );
            }
            // return ajax json encoded response and exit
            echo $out;
            return;
        }
        
        // non-ajax - render the grid by default
        return $this->render( 'index', [
                    'dataProvider' => $dataProvider,
                    'searchModel' => $searchModel
                ] );
    }

    public function actionAccept() {
        $searchModel = new InvoicesSearch();
        $dataProvider = $searchModel->searchAccepted( Yii::$app->request->queryParams );
        
        $this->layout = 'action';
        $dataProvider->pagination->pageSize = 15;
        $dataProvider->sort = ['defaultOrder' => ['acceptedAt' => 'DESC']]; 
        
        if ( Yii::$app->request->post( 'hasEditable' ) )
        {

            // instantiate your book model for saving
            $statusId = Yii::$app->request->post( 'editableKey' );
            $model = Invoices::findOne( $statusId );

            // store a default json response as desired by editable
            $out = Json::encode( ['output' => '', 'message' => '' ] );

            // fetch the first entry in posted data (there should 
            // only be one entry anyway in this array for an 
            // editable submission)
            // - $posted is the posted data for Book without any indexes
            // - $post is the converted array for single model validation
            $post = [ ];
            $posted = current( $_POST[ 'Invoices' ] );
            $post[ 'Invoices' ] = $posted;

            // load model like any single model validation
            if ( $model->load( $post ) )
            {
                // can save model or do something before saving model
                $model->save();

                // custom output to return to be displayed as the editable grid cell
                // data. Normally this is empty - whereby whatever value is edited by 
                // in the input by user is updated automatically.
//           
//           $roleList = User::getRoleList();
//           if(isset()) var_dump(User::getStatusList());
                // $output = Yii::$app->request->post('hasEditable');
                // specific use case where you need to validate a specific
                // editable column posted when you have more than one 
                // EditableColumn in the grid view. We evaluate here a 
                // check to see if buy_amount was posted for the Book model
                if ( isset( $posted[ 'supplierId' ] ) )
                {
                    $output = $posted[ 'supplierId' ];
                }
                if ( isset( $posted[ 'connection' ] ) )
                {
                    $output = $posted[ 'connection' ];
                }
                if ( isset( $posted[ 'signedBy' ] ) )
                {
                    $model = new Invemp;
                    $result = $model->find()->where(['id' => $posted['signedBy']])->one();
                    $output = $result->name;
                }

                // similarly you can check if the name attribute was posted as well
                // if (isset($posted['name'])) {
                //   $output =  ''; // process as you need
                // } 
                $out = Json::encode( ['output' => $output, 'message' => '' ] );
            }
            // return ajax json encoded response and exit
            echo $out;
            return;
        }
        
        return $this->render( 'accepted', [
                    'dataProvider' => $dataProvider,
                    'searchModel' => $searchModel
                ] );
    }

    public function actionAccepted( $id ) {

        $model = Invoices::find()->where( ['id' => $id ] )->one();

        if ( $model->supplierId & $model->connection )
        {
            $model->isAccepted = 1;
            $model->acceptedBy = Yii::$app->user->id;
            if ( $model->save() )
            {
                Yii::$app->session->setFlash( 'success', 'Invoice: ' . $model->name . ' has been succesfully accepted.' );
                return $this->redirect( ['index' ] );
            }
        }
      
            Yii::$app->getSession()->setFlash( 'error', 'Supplier and Connection have to be set first.' );
            return $this->redirect( ['index' ] );
        
    }

    /**
     * Displays a single Invoices model.
     * @param integer $id
     * @return mixed
     */
    public function actionView( $path, $name ) {

        $fileName = $name . '.pdf';
        header( 'Content-type: application/pdf' );
        header( 'Content-Disposition: inline; filename="' . $fileName . '"' );
        //header('Content-Length: ' . filesize($filename));
        //header('Content-Transfer-Encoding: binary');
        //header('Accept-Ranges: bytes');
        echo '<head><title>Page Title</title></head>';
        return readfile( $path );
    }

    /**
     * Creates a new Invoices model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate() {
        $model = new Invoices();

        if ( $model->load( Yii::$app->request->post() ) && $model->save() )
        {
            return $this->redirect( ['view', 'id' => $model->id ] );
        } else
        {
            return $this->render( 'create', [
                        'model' => $model,
                    ] );
        }
    }

    /**
     * Updates an existing Invoices model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate( $id ) {
        $model = $this->findModel( $id );

        if ( $model->load( Yii::$app->request->post() ) && $model->save() )
        {
            return $this->redirect( ['view', 'id' => $model->id ] );
        } else
        {
            return $this->render( 'update', [
                        'model' => $model,
                    ] );
        }
    }

    /**
     * Deletes an existing Invoices model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete( $id ) {
        $model = Invoices::findOne( $id );
        $imagePath = $_SERVER['DOCUMENT_ROOT'].'/assets/pdf_thumbnails/'. $model['name'] . '.jpg';
        if(  file_exists( $model['path'])){
        unlink($model['path']);  
        }
        
        if(  file_exists( $imagePath)){
        unlink($imagePath);  
        }
        
        $this->findModel( $id )->delete();   
        return $this->redirect( ['index' ] );
    }

    /**
     * Finds the Invoices model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Invoices the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel( $id ) {
        if ( ($model = Invoices::findOne( $id )) !== null )
        {
            return $model;
        } else
        {
            throw new NotFoundHttpException( 'The requested page does not exist.' );
        }
    }

    public function actionIndex2() {
        if(Yii::$app->user->isGuest){
            return $this->redirect(['site/login', 'flag' => 1]);
        }
        // your default model and dataProvider generated by gii
        $this->scanPdf();
        $searchModel = new InvoicesSearch();
        $id = '0';
        $dataProvider = $searchModel->search( Yii::$app->request->queryParams );

        $this->layout = 'action';
        $dataProvider->pagination->pageSize = 10;
        $dataProvider->sort = ['defaultOrder' => ['creTime' => 'DESC']]; 
        // validate if there is a editable input saved via AJAX
        if ( Yii::$app->request->post( 'hasEditable' ) )
        {

            // instantiate your book model for saving
            $statusId = Yii::$app->request->post( 'editableKey' );
            $model = Invoices::findOne( $statusId );

            // store a default json response as desired by editable
            $out = Json::encode( ['output' => '', 'message' => '' ] );

            // fetch the first entry in posted data (there should 
            // only be one entry anyway in this array for an 
            // editable submission)
            // - $posted is the posted data for Book without any indexes
            // - $post is the converted array for single model validation
            $post = [ ];
            $posted = current( $_POST[ 'Invoices' ] );
            $post[ 'Invoices' ] = $posted;

            // load model like any single model validation
            if ( $model->load( $post ) )
            {
                // can save model or do something before saving model
                $model->save();

                // custom output to return to be displayed as the editable grid cell
                // data. Normally this is empty - whereby whatever value is edited by 
                // in the input by user is updated automatically.
//           
//           $roleList = User::getRoleList();
//           if(isset()) var_dump(User::getStatusList());
                // $output = Yii::$app->request->post('hasEditable');
                // specific use case where you need to validate a specific
                // editable column posted when you have more than one 
                // EditableColumn in the grid view. We evaluate here a 
                // check to see if buy_amount was posted for the Book model
                if ( isset( $posted[ 'supplierId' ] ) )
                {
                    $output = $posted[ 'supplierId' ];
                }
                if ( isset( $posted[ 'connection' ] ) )
                {
                    $output = $posted[ 'connection' ];
                }
                if ( isset( $posted[ 'signedBy' ] ) )
                {
                    $model = new Invemp;
                    $result = $model->find()->where(['id' => $posted['signedBy']])->one();
                    $output = $result->name;
                }

                // similarly you can check if the name attribute was posted as well
                // if (isset($posted['name'])) {
                //   $output =  ''; // process as you need
                // } 
                $out = Json::encode( ['output' => $output, 'message' => '' ] );
            }
            // return ajax json encoded response and exit
            echo $out;
            return;
        }
        // non-ajax - render the grid by default
        return $this->render( 'index2', [
                    'dataProvider' => $dataProvider,
                    'searchModel' => $searchModel
                ] );
    }
    
    public function actionTagme(){
        if (Yii::$app->request->isAjax) {
                $data = Yii::$app->request->post();
                $model = new Invoices;
                $modelData = $model->find()->where(['id' => $data['id']])->one();
                $modelData->connection = implode(', ', $data['data']);
                if($modelData->save()){
                     \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return [
            'code' => 400,
            ];
                }
                
//                foreach($data['id'] as $id){
//           
//                $model = $this->findModel($id);
//                $model->priorityId = 2;
//                $model->save();
//                }
                \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return [
            'code' => 200,
            ];
    }
    }
    
    public function actionFlag(){
        if (Yii::$app->request->isAjax) {
                $data = Yii::$app->request->post();
                $model = new Invoices;
                $modelData = $model->find()->where(['id' => $data['id']])->one();
                if($data['action'] == 'flag'){
                    $modelData->flag = 1;
                } else {
                    $modelData->flag = 0;
                }
                if($modelData->save()){
                     \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return [
            'code' => 400,
            ];
                }

                \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return [
            'code' => 200,
            ];
    }
    }
}
